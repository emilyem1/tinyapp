const express = require("express");
const helpers = require("./helpers");
const cookieSession = require("cookie-session");
const bcrypt = require("bcryptjs");
const app = express();
const PORT = 8080; // default port 8080

app.use(
  cookieSession({
    name: 'session',
    keys: ['secret-key'], 
    maxAge: 24 * 60 * 60 * 1000, // 24 hours 
  })
);

const urlDatabase = {
/* 
* Will populate with urls through the urls/new path
* Once a new url is created, the updated urlDatabase object will appear in
* terminal
*/
};

const users = {
/* 
* Will populate with users with hashed passwords through the /register path
* Once registered, the updated users object will appear in terminal
*/
};

app.set("view engine", "ejs"); // tells express app to use EJS as template 

app.use(express.urlencoded({ extended: true })); /* needs to be before all routes; will convert buffer body into string */ 

app.get("/", (req, res) => {
  res.send("Hello!");
});

app.get("/hello", (req, res) => {
  res.send("<html><body>Hello <b>World</b></body></html>\n");
});

app.get("/urls", (req, res) => {
  const userId = req.session.userId;
  const userUrls = helpers.urlsForUser(userId, urlDatabase);
  const templateVars = {
    user: users[userId], /* looks into the users object for the userId generated by the cookie */
    urls: userUrls
  };
  if (!userId) {
    res.render("login_prompt", templateVars); // Create a new EJS template for login prompt
    return;
  } else {
    res.render("urls_index", templateVars);
  }
});

app.get("/urls/new", (req, res) => {
  if (!req.session.userId) {
    res.redirect("/login");
    return;
  }
  const templateVars = {
    user: users[req.session["userId"]],
    urls: urlDatabase
  };
  res.render("urls_new", templateVars);
});

app.post("/urls", (req, res) => {
  if (!req.session.userId) { // If not logged in
    res.status(403).send("You must be logged in to shorten URLs");
  } else {
    // Generate a random id for the new URL
    const id = helpers.generateRandomString();
    // Get the longURL from the request body 
    const longURL = req.body.longURL;
    // Add the id-longURL pair to the urlDatabase
    urlDatabase[id] = { longURL: longURL, userID: req.session.userId };
    // Make sure the urlDatabase object updated
    console.log(urlDatabase);
    // Redirect to the page that displays the newly created URL
    res.redirect(`/urls/${id}`);
  }
});

app.get("/urls/:id", (req, res) => {
  const id = req.params.id;
  const url = urlDatabase[id];
  if (!url) {
    res.status(404).send("URL not found"); 
    return;
  }
  const templateVars = { id: id, longURL: url.longURL, user: users[req.session["userId"]] };
  if (!req.session.userId) {
    res.status(403).send("You must be logged in to view URLs");
    return;
  }
  if (req.session.userId !== url.userID) {
    res.status(403).send("You do not have permission to view this URL");
    return;
  }
  res.render("urls_show", templateVars);
});

app.get("/u/:id", (req, res) => {
  const id = req.params.id; // Get the id parameter from the URL
  const longURL = urlDatabase[id].longURL; // Retrieve the longURL from the urlDatabase
  if (longURL) {
    res.redirect(longURL); // Redirect to the longURL if it exists
  } else {
    res.status(404).send("URL not found"); // Handle the case where the id is not found in the database
  }
});

app.post("/urls/:id/delete", (req, res) => {
  const id = req.params.id; // Get the id parameter from the URL
  const url = urlDatabase[id];
  if (!url) {
    res.status(404).send("URL not found"); 
    return;
  }
  if (!req.session.userId) {
    res.status(403).send("You must be logged in to view URLs");
    return;
  }
  if (req.session.userId === url.userID) {
    delete urlDatabase[id]
    res.redirect("/urls")
  } else {
    res.status(403).send("You do not have permission to delete this URL");
  }
});

app.post("/urls/:id/edit", (req, res) => {
  const id = req.params.id; // Get the id parameter from the URL
  const newLongURL = req.body.newLongURL; // Get the updated URL from the input
  const url = urlDatabase[id];
  if (req.session.userId === url.userID) {
    // Update the URL in urlDatabase using the id
    urlDatabase[id].longURL = newLongURL;
    res.redirect(`/urls`);
  } else {
    res.status(403).send("You do not have permission to edit this URL");
  }
});

app.post("/login", (req, res) => {
  const { email, password } = req.body;
  const user = helpers.getUserByEmail(email, users); // Check if the email exists
  if (user === null) {
    res.status(403).send("Invalid email or password");
  } 
  const passwordMatch = bcrypt.compareSync(password, user.password);
  if (!passwordMatch) { // if passwordMatch returns false 
    res.status(403).send("Invalid email or password");
  } else {
    req.session.userId = user.id;
    res.redirect("/urls");
  }
});

app.get("/login", (req, res) => {
  if (req.session.userId) {
    res.redirect("/urls");
    return; 
  }
  const templateVars = {
    user: users[req.session["userId"]], /* looks into the users object for that userId generated by the cookie */
    urls: urlDatabase
  };
  res.render("login", templateVars);
});

app.post("/logout", (req, res) => {
  req.session = null; // Clear the "userId" cookie
  res.redirect("/login");
});

app.get("/register", (req, res) => {
  if (req.session.userId) {
    res.redirect("/urls");
    return; 
  }
  const templateVars = {
    user: users[req.session["userId"]], /* looks into the users object for that userId generated by the cookie */
    urls: urlDatabase
  };
  res.render("register", templateVars); // Render the register.ejs template
});

app.post("/register", (req, res) => {
  const userId = helpers.generateRandomString(); // Generate a random userId
  const { email, password } = req.body; // Get the email and password
  // Check for empty email or password
  if (!email || !password) {
    return res.status(400).send("Enter valid email and password");
  } 
  // Check if the email is already in use
  if (helpers.getUserByEmail(email, users) !== null) {
      return res.status(400).send("Email already in use");
  } 
  // Hash the password using bcrypt
  const hashedPassword = bcrypt.hashSync(password, 10);
  // Add new user to global users object
  users[userId] = { 
    id: userId,
    email: email,
    password: hashedPassword // Store hashed password
  };
  req.session.userId = userId; // create a cookie with the userId
  console.log(users); // check to see if users object updated 
  res.redirect("/urls");
});

app.get("/urls.json", (req, res) => {
  res.json(urlDatabase);
});

app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});
